library(shiny)
shiny::runApp()
shiny::runApp()
shiny::runApp()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
summary(modelfit)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
str(mtcars)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
prediction
result = cbind(prediction, test[,1])
result
mse = sum((prediction-test[,1])^2)
mse
mse = sum((prediction-test[,1])^2)/11
mse
smse = sqrt(mse)
smse
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
view(mtcars)
View(mtcars)
? mtcars
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
summary(mtcars$hp)
?radiobuttons
?radioButtons
? numericInput
summary(mtcars$wt)
selectInput
?selectInput
summary(mtcars$am)
?textOutput
shiny::runApp()
source('~/.active-rstudio-document', echo=TRUE)
str(prediction)
shiny::runApp()
predictMpg <- function(cyl,hp,wt,am,gear)
{
intrain = createDataPartition(mtcars$mpg, p = 5/5, list = FALSE)
train = mtcars[intrain,]
test = mtcars[-intrain,]
modelfit= train(train$mpg ~ cyl+hp+wt+am+gear, method="glm", data=train)
prediction =predict(modelfit,c(cyl,hp,wt,am,gear))
}
predictMpg(4,135,3.5,1,5)
prediction
predictMpg <- function(cyl,hp,wt,am,gear)
{
intrain = createDataPartition(mtcars$mpg, p = 5/5, list = FALSE)
train = mtcars[intrain,]
test = mtcars[-intrain,]
modelfit= train(train$mpg ~ cyl+hp+wt+am+gear, method="glm", data=train)
prediction = predict(modelfit,c(cyl,hp,wt,am,gear))
prediction
}
predictMpg(4,135,3.5,1,5)
c(cyl,hp,wt,am,gear)
intrain = createDataPartition(mtcars$mpg, p = 5/5, list = FALSE)
train = mtcars[intrain,]
test = mtcars[-intrain,]
modelfit= train(train$mpg ~ cyl+hp+wt+am+gear, method="glm", data=train)
prediction = predict(modelfit,c(cyl,hp,wt,am,gear))
prediction
intrain = createDataPartition(mtcars$mpg, p = 5/5, list = FALSE)
train = mtcars[intrain,]
test = mtcars[-intrain,]
modelfit= train(train$mpg ~ cyl+hp+wt+am+gear, method="glm", data=train)
prediction = predict(modelfit,c(4,135,3.5,1,5))
prediction
shiny::runApp()
shiny::runApp()
shiny::runApp()
data(mtcars)
intrain = createDataPartition(mtcars$mpg, p = 5/5, list = FALSE)
train = mtcars[intrain,]
test = mtcars[-intrain,]
modelfit= train(train$mpg ~ cyl+hp+wt+am+gear, method="glm", data=train)
input = NULL
input$cyl = 4 #nbr of cylinders (4, 6 or 8)
input$hp = 130 # Gross horsepower
input$wt = 3.000 #Weight (lb/1000)
input$am = 1 #Transmission (0 = automatic, 1 = manual)
input$gear = 4 #Number of forward gears ( 3,4 or 5)
prediction =predict(modelfit,input)
prediction
shiny::runApp()
cyl = 4 #nbr of cylinders (4, 6 or 8)
hp = 130 # Gross horsepower
wt = 3.000 #Weight (lb/1000)
am = 1 #Transmission (0 = automatic, 1 = manual)
gear = 4 #Number of forward gears ( 3,4 or 5)
data(mtcars)
intrain = createDataPartition(mtcars$mpg, p = 5/5, list = FALSE)
train = mtcars[intrain,]
test = mtcars[-intrain,]
modelfit= train(train$mpg ~ train$cyl+train$hp+train$wt+train$am+train$gear, method="glm", data=train)
newcar = NULL
newcar$cyl = cyl
newcar$hp = hp
newcar$wt = wt
newcar$am = am
newcar$gear = gear
prediction = predict(modelfit,newcar)
prediction
data(mtcars)
intrain = createDataPartition(mtcars$mpg, p = 5/5, list = FALSE)
train = mtcars[intrain,]
test = mtcars[-intrain,]
modelfit= train(train$mpg ~ cyl+hp+wt+am+gear, method="glm", data=train)
newcar = NULL
newcar$cyl = cyl
newcar$hp = hp
newcar$wt = wt
newcar$am = am
newcar$gear = gear
prediction = predict(modelfit,newcar)
prediction
shiny::runApp()
?numericInput
shiny::runApp()
shiny::runApp()
?isolate
shiny::runApp()
shiny::runApp()
?reactive
shiny::runApp()
?submitButton
shiny::runApp()
data(mtcars)
intrain = createDataPartition(mtcars$mpg, p = 5/5, list = FALSE)
train = mtcars[intrain,]
test = mtcars[-intrain,]
modelfit= train(train$mpg ~ cyl+hp+wt+am+gear, method="glm", data=train)
newcar = NULL
newcar$cyl = cyl
newcar$hp = hp
newcar$wt = wt
newcar$am = am
newcar$gear = gear
prediction = predict(modelfit,newcar)
prediction
shiny::runApp()
Operation not allowed without an active reactive contex
runApp(displayMode = 'showcase')
shiny::runApp()
shiny::runApp()
?submitButton
shiny::runApp()
shiny::runApp()
shiny::runApp()
?actionButton
shiny::runApp()
shiny::runApp()
shiny::runApp()
?renderText
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?headerPanel
shiny::runApp()
?numericInput
shiny::runApp()
?numericInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?ablines
?abline
shiny::runApp()
hist(mtcars$mpg, xlab='mpg', col='red',main='This prediction vs mtcars sample')
pred <- predictMpg(as.numeric(input$cyl),input$hp,input$wt,as.numeric(input$am),as.numeric(input$gear))
abline (v = pred)
abline(v = 21)
abline(v = 21, size = 4)
?abline
abline(v = 21, lwd = 4)
abline(v = 21, lwd = 4, lty = 3)
abline(v = 21, lwd = 4, lty = 3)
?lty
shiny::runApp()
hist(mtcars$mpg, xlab='mpg', col='red',main='This prediction vs mtcars sample')
hist(mtcars$mpg, xlab='mpg', col='red',main='This prediction vs mtcars sample', breaks = 1)
?hist
hist(mtcars$mpg, xlab='mpg', col='red',main='This prediction vs mtcars sample', breaks = 15)
hist(mtcars$mpg, xlab='mpg', col='red',main='This prediction vs mtcars sample', breaks = 20)
dim(mtcars)
shiny::runApp()
shiny::runApp()
shiny::runApp()
?renderText
?p
?renderPrint
?textOutput
shiny::runApp()
shiny::runApp()
?verbatimTextOutput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
? mtcars
source('~/.active-rstudio-document', echo=TRUE)
shiny::runApp()
intrain = createDataPartition(mtcars$mpg, p = 4/5, list = FALSE)
train = mtcars[intrain,]
#save modelfit so it can be reused
modelfit <<- train(train$mpg ~ cyl+hp+wt+am+gear, method="glm", data=train)
summary(modelfit)
## load libs
library(caret)
## building the model
data(mtcars)
intrain = createDataPartition(mtcars$mpg, p = 5/5, list = FALSE)
train = mtcars[intrain,]
test = mtcars[-intrain,]
modelfit= train(train$mpg ~ cyl+hp+wt+am+gear, method="glm", data=train)
input = NULL
input$cyl = 4 #nbr of cylinders (4, 6 or 8)
input$hp = 130 # Gross horsepower
input$wt = 3.000 #Weight (lb/1000)
input$am = 1 #Transmission (0 = automatic, 1 = manual)
input$gear = 4 #Number of forward gears ( 3,4 or 5)
prediction =predict(modelfit,input)
prediction
predict(modelfit, train)
predict(modelfit, test)
## load libs
library(caret)
## building the model
data(mtcars)
intrain = createDataPartition(mtcars$mpg, p = 4/5, list = FALSE)
train = mtcars[intrain,]
test = mtcars[-intrain,]
modelfit= train(train$mpg ~ cyl+hp+wt+am+gear, method="glm", data=train)
input = NULL
input$cyl = 4 #nbr of cylinders (4, 6 or 8)
input$hp = 130 # Gross horsepower
input$wt = 3.000 #Weight (lb/1000)
input$am = 1 #Transmission (0 = automatic, 1 = manual)
input$gear = 4 #Number of forward gears ( 3,4 or 5)
prediction =predict(modelfit,input)
prediction
summary(predict(modelfit, train))
summary(predict(modelfit, test))
## load libs
library(caret)
## building the model
data(mtcars)
intrain = createDataPartition(mtcars$mpg, p = 4/5, list = FALSE)
train = mtcars[intrain,]
test = mtcars[-intrain,]
modelfit= train(train$mpg ~ cyl+hp+wt+am+gear, method="glm", data=train)
input = NULL
input$cyl = 4 #nbr of cylinders (4, 6 or 8)
input$hp = 130 # Gross horsepower
input$wt = 3.000 #Weight (lb/1000)
input$am = 1 #Transmission (0 = automatic, 1 = manual)
input$gear = 4 #Number of forward gears ( 3,4 or 5)
prediction =predict(modelfit,input)
prediction
# calculate the RMSE on training
sqrt(sum(modelfit$fitted- train$mpg)^2)
# calculate the RMSE on test
sqrt(sum(predict(modelfit, newdata = test) - test$mpg)^2)
# result = cbind(prediction, test[,1])
#
# mse = sqrt(sum((prediction-test[,1])^2)/11)
#
# mse / mean(mtcars$mpg)
#
# prediction2 =predict(modelfit,train[,c(2,4,6,9,10)])
#
# result2 = cbind(prediction2, train[,1])
#
# mse2 = sqrt(sum((prediction2-train[,1])^2)/11)
#
# mse2 / mean(mtcars$mpg)
## load libs
library(caret)
## building the model
data(mtcars)
intrain = createDataPartition(mtcars$mpg, p = 4/5, list = FALSE)
train = mtcars[intrain,]
test = mtcars[-intrain,]
prediction =predict(modelfit,input)
# calculate the RMSE on training
TrainRMSE = sqrt(sum(modelfit$fitted- train$mpg)^2)
TrainRMSE
# calculate the RMSE on test
RMSE = sqrt(sum(predict(modelfit, newdata = test) - test$mpg)^2)
TestRMSE
## load libs
library(caret)
## building the model
data(mtcars)
intrain = createDataPartition(mtcars$mpg, p = 4/5, list = FALSE)
train = mtcars[intrain,]
test = mtcars[-intrain,]
prediction =predict(modelfit,input)
# calculate the RMSE on training
TrainRMSE = sqrt(sum(modelfit$fitted- train$mpg)^2)
TrainRMSE
# calculate the RMSE on test
TestRMSE = sqrt(sum(predict(modelfit, newdata = test) - test$mpg)^2)
TestRMSE
str(mtcars)
table(mtcars)
summary(mtcars)
summary(mtcars$mpg)
str(mtcars$mpg)
dim(mtcars)[,1]
dim(mtcars)
dim(mtcars)[1]
shiny::runApp()
shiny::runApp()
